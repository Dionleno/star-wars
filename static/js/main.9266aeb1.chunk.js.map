{"version":3,"sources":["pages/planets/planets.jsx","ui/panel/panel.jsx","pages/home/home.jsx","serviceWorker.js","index.js","config/router.js","assets/images/star-wars-logo.svg"],"names":["API_URL","Planets","state","count","perPage","loading","planet","name","population","climate","terrain","films","getPlanets","page","_this","getRandomCount","setState","fetch","concat","then","res","json","planetIndex","Math","floor","random","results","length","catch","err","min","max","ceil","planetStart","this","_this2","_this$state","_this$state$planet","react_default","a","createElement","className","style","visibility","CircularProgress_default","color","thickness","src","logo","alt","marginTop","class","index_es","variant","size","onClick","Component","Panel","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","children","Home","panel_panel","Link","to","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Switch","Route","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"0XAKMA,UAAU,wBA2FDC,6MAzFbC,MAAQ,CACNC,MAAO,GACPC,QAAS,GACTC,SAAS,EACTC,OAAQ,CACNC,KAAM,GACNC,WAAY,GACZC,QAAS,GACTC,QAAS,GACTC,MAAO,OAMXC,WAAa,WACX,IAAIC,EAAOC,EAAKC,eAAe,EAAGD,EAAKZ,MAAMC,OAC7CW,EAAKE,SAAS,CACZX,SAAS,IAGXY,MAAK,GAAAC,OAAIlB,EAAJ,kBAAAkB,OAA4BL,IAC9BM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJ,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,QAAQC,QAEzDb,EAAKE,SAAS,CACZb,MAAOiB,EAAIjB,MACXE,SAAS,EACTC,OAAQc,EAAIM,QAAQJ,OAGvBM,MAAM,SAAAC,GACLf,EAAKE,SAAS,CACZX,SAAS,SAIjBU,eAAiB,SAACe,EAAKC,GAGrB,OAFAD,EAAMP,KAAKS,KAAKF,GAChBC,EAAMR,KAAKC,MAAMO,GACVR,KAAKC,MAAOD,KAAKE,UAAYM,EAAMD,GAAQhB,EAAKZ,MAAME,SAAW0B,KAG1EG,YAAc,WACZnB,EAAKF,iGAhCLsB,KAAKtB,8CAkCE,IAAAuB,EAAAD,KAAAE,EAIHF,KAAKhC,MAJFmC,EAAAD,EAEL9B,OAAUC,EAFL8B,EAEK9B,KAAMC,EAFX6B,EAEW7B,WAAYC,EAFvB4B,EAEuB5B,QAASC,EAFhC2B,EAEgC3B,QAASC,EAFzC0B,EAEyC1B,MAC9CN,EAHK+B,EAGL/B,QAEF,OACEiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CAAEC,WAAYtC,EAAU,UAAY,WAE3CiC,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEE,UAAW,WACXC,MAAO,CAAEG,MAAO,WAChBC,UAAW,KAGfR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzCX,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEQ,UAAW,KAA1B,eACAZ,EAAAC,EAAAC,cAAA,UAAKjC,GAEL+B,EAAAC,EAAAC,cAAA,MAAIW,MAAM,cACRb,EAAAC,EAAAC,cAAA,MAAIW,MAAM,mBAAV,eAAyC3C,EAAzC,KACA8B,EAAAC,EAAAC,cAAA,MAAIW,MAAM,mBAAV,YAAsC1C,GACtC6B,EAAAC,EAAAC,cAAA,MAAIW,MAAM,mBAAV,YAAsCzC,IAGxC4B,EAAAC,EAAAC,cAAA,wBAAgB7B,EAAMgB,OAAtB,UACAW,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLC,QAAS,kBAAMpB,EAAKF,gBAHtB,iBA7EYuB,sBCYPC,sBAdb,SAAAA,EAAYC,GAAO,IAAA5C,EAAA,OAAA6C,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACjB3C,EAAA6C,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,KAAMwB,KACDxD,MAAQ,GAFIY,wEAKV,IACCkD,EAAa9B,KAAKwB,MAAlBM,SACR,OACE1B,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMX,UAAU,QACdH,EAAAC,EAAAC,cAACY,EAAA,EAAD,KAAcY,WAVFR,cCqBLS,2LAhBX,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0B,EAAD,KACE5B,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,0CAGFF,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAMC,GAAG,YACP9B,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,SAAjC,uBAVSE,cCICa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrC,EAAAC,EAAAC,cCDD,SAAAkB,GAAK,OAClBpB,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAW/E,IAClCqC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWf,IAC3B3B,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWf,ODJjB,MAAYgB,SAASC,eAAe,SDmH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC,mCG3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.9266aeb1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport logo from \"../../assets/images/star-wars-logo.svg\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport \"./planets.css\";\r\nconst API_URL = \"https://swapi.co/api\";\r\nclass Planets extends Component {\r\n  state = {\r\n    count: 61,\r\n    perPage: 10,\r\n    loading: false,\r\n    planet: {\r\n      name: \"\",\r\n      population: \"\",\r\n      climate: \"\",\r\n      terrain: \"\",\r\n      films: []\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.getPlanets();\r\n  }\r\n  getPlanets = () => {\r\n    let page = this.getRandomCount(1, this.state.count);\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    fetch(`${API_URL}/planets?page=${page}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        let planetIndex = Math.floor(Math.random() * res.results.length);\r\n\r\n        this.setState({\r\n          count: res.count,\r\n          loading: false,\r\n          planet: res.results[planetIndex]\r\n        });\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        });\r\n      });\r\n  };\r\n  getRandomCount = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor((Math.random() * (max - min)) / this.state.perPage) + min;\r\n  };\r\n\r\n  planetStart = () => {\r\n    this.getPlanets();\r\n  };\r\n  render() {\r\n    const {\r\n      planet: { name, population, climate, terrain, films },\r\n      loading\r\n    } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <div\r\n          className=\"boxloading\"\r\n          style={{ visibility: loading ? \"visible\" : \"hidden\" }}\r\n        >\r\n          <CircularProgress\r\n            className={\"progress\"}\r\n            style={{ color: \"#FFFFFF\" }}\r\n            thickness={7}\r\n          />\r\n        </div>\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <span style={{ marginTop: 30 }}>Planet name</span>\r\n          <h1>{name}</h1>\r\n\r\n          <ul class=\"list-group\">\r\n            <li class=\"list-group-item\">Population: {population} </li>\r\n            <li class=\"list-group-item\">Climate: {climate}</li>\r\n            <li class=\"list-group-item\">Terrain: {terrain}</li>\r\n          </ul>\r\n\r\n          <p>Featured in {films.length} films</p>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            onClick={() => this.planetStart()}\r\n          >\r\n            Next\r\n          </Button>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Planets;\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardContent, Button, Grid } from \"@material-ui/core\";\r\nimport \"./panel.css\";\r\nclass Panel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <Card className=\"card\">\r\n        <CardContent>{children}</CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default Panel;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Panel from \"../../ui/panel/panel\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport \"./home.css\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"box\">\r\n        <Panel>\r\n          <p>Está pronto para conhecer mais sobre nossos planetas?</p>\r\n          <p>Bem vindo ao jogo Star Wars!</p>\r\n        </Panel>\r\n\r\n        <Link to=\"/planets\">\r\n          <Button variant=\"contained\" size=\"large\">\r\n            Começar\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Router from \"./config/router\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Router />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Planets from \"../pages/planets/planets\";\r\nimport Home from \"../pages/home/home\";\r\n\r\nexport default props => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/planets\" component={Planets} />\r\n      <Route path=\"/\" component={Home} />\r\n      <Route path=\"*\" component={Home} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.c41f740a.svg\";"],"sourceRoot":""}